-- XGEN: Autogenerated File

library IEEE;
library UNISIM;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use UNISIM.VComponents.all;
use ieee.std_logic_unsigned.all;
use work.argg_hdl_core.all;
use work.axisStream_slv32.all;


entity Counter is 
  port(
    Data_out_s2m :  in  axiStream_slv32_s2m := axiStream_slv32_s2m_null;
    Data_out_m2s :  out  axiStream_slv32_m2s := axiStream_slv32_m2s_null;
    clk :  in  std_logic := '0'
  );
end entity;



architecture rtl of Counter is

--------------------------Counter-----------------
  signal data : std_logic_vector(31 downto 0) := (others => '0'); 
  signal data2 : std_logic_vector(31 downto 0) := (others => '0'); 
-------------------------- end Counter-----------------

begin
  -- begin architecture
  
-----------------------------------
proc : process(clk) is
  variable data_out : axiStream_slv32_master := axiStream_slv32_master_null;
  begin
    if rising_edge(clk) then 
      pull( self  =>  data_out, tx => Data_out_s2m);
  data <= data + 1;
    
      if (( ready_to_send_0(self => data_out) and data > 10) ) then 
        send_data_01(self => data_out, dataIn => data2);
        data2 <= data2 + 1;
        data <=  (others => '0');
        
      end if;
        push( self  =>  data_out, tx => Data_out_m2s);
  end if;
  
  end process;
  -- end architecture
end architecture;