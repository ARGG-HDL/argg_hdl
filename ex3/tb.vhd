-- XGEN: Autogenerated File

library IEEE;
library UNISIM;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use UNISIM.VComponents.all;
use ieee.std_logic_unsigned.all;
use work.argg_hdl_core.all;
use work.axisStream_slv32.all;
use work.optional_t_pack.all;


entity tb is 
end entity;



architecture rtl of tb is

--------------------------tb-----------------
--------------------------clkgen-----------------
  signal clkgen_clk : std_logic := '0'; 
-------------------------- end clkgen-----------------
--------------------------cnt-----------------
  signal cnt_Data_out_s2m : axiStream_slv32_s2m := axiStream_slv32_s2m_null;
  signal cnt_Data_out_m2s : axiStream_slv32_m2s := axiStream_slv32_m2s_null;
  signal cnt_clk : std_logic := '0'; 
-------------------------- end cnt-----------------
  signal data2 : std_logic_vector(31 downto 0) := (others => '0'); 
  signal data : std_logic_vector(31 downto 0) := (others => '0'); 
-------------------------- end tb-----------------

begin
  -- begin architecture
  
-----------------------------------
proc : process(clkgen_clk) is
  variable cnt_out : axiStream_slv32_slave := axiStream_slv32_slave_null;
  variable opt_data : optional_t := optional_t_null;
  begin
    if rising_edge(clkgen_clk) then 
      pull( self  =>  cnt_out, rx => cnt_Data_out_m2s);
  get_value_01_rshift(self => cnt_out, rhs => data);
    get_value_00_rshift(self => cnt_out, rhs => opt_data);
        push( self  =>  cnt_out, rx => cnt_Data_out_s2m);
  end if;
  
  end process;
  -- end architecture
  clkgen : entity work.clk_generator port map (
    clk => clkgen_clk
  );
  
  cnt : entity work.Counter port map (
    Data_out_s2m => cnt_Data_out_s2m,
    Data_out_m2s => cnt_Data_out_m2s,
    clk => cnt_clk
  );
  cnt_clk <= clkgen_clk;
  
end architecture;