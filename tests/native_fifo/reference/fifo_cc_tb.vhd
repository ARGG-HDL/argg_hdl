-- XGEN: Autogenerated File

library IEEE;
library UNISIM;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use UNISIM.VComponents.all;
use ieee.std_logic_unsigned.all;
use work.NativeFifoOut_pack.all;
use work.argg_hdl_core.all;


entity fifo_cc_tb is 
end entity;



architecture rtl of fifo_cc_tb is

--------------------------fifo_cc_tb-----------------
--------------------------clkgen-----------------
  signal clkgen_clk : std_logic := '0'; 
-------------------------- end clkgen-----------------
  signal data : std_logic_vector(31 downto 0) := (others => '0'); 
--------------------------ff_readout-----------------
  signal ff_readout_Data_in_s2m : NativeFifoOut_s2m := NativeFifoOut_s2m_null;
  signal ff_readout_Data_in_m2s : NativeFifoOut_m2s := NativeFifoOut_m2s_null;
  signal ff_readout_clk : std_logic := '0'; 
-------------------------- end ff_readout-----------------
-------------------------- end fifo_cc_tb-----------------

begin
  -- begin architecture
  
-----------------------------------
proc : process(clkgen_clk) is
  begin
    if rising_edge(clkgen_clk) then 
  ff_readout_Data_in_m2s.empty <= '1';
    data <= data + 1;
    
      if (( data > 10 and data < 20) ) then 
        ff_readout_Data_in_m2s.empty <= '0';
        
      end if;
    
      if (ff_readout_Data_in_s2m.enable = '1') then 
        ff_readout_Data_in_m2s.data <= data;
        
      end if;
    end if;
  
  end process;
  -- end architecture

  clkgen : entity work.clk_generator port map (
    clk => clkgen_clk
  );
  
  ff_readout : entity work.readout_native_fifo port map (
    Data_in_s2m => ff_readout_Data_in_s2m,
    Data_in_m2s => ff_readout_Data_in_m2s,
    clk => ff_readout_clk
  );
  ff_readout_clk <= clkgen_clk;
  
end architecture;