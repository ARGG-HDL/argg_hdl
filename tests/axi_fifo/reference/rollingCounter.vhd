-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.argg_hdl_core.all;
use work.axisStream_slv32.all;


entity rollingCounter is 
  port(
    Axi_out_s2m :  in  axiStream_slv32_s2m := axiStream_slv32_s2m_null;
    Axi_out_m2s :  out  axiStream_slv32_m2s := axiStream_slv32_m2s_null;
    MaxCount :  in  std_logic_vector(31 downto 0) := std_logic_vector(to_unsigned(10, 32));
    clk :  in  std_logic := '0'
  );
end entity;



architecture rtl of rollingCounter is

--------------------------rollingCounter-----------------
  signal counter : std_logic_vector(31 downto 0) := (others => '0'); 
-------------------------- end rollingCounter-----------------

begin

  -----------------------------------
  proc : process(clk) is
    variable v_Axi_out : axiStream_slv32_master := axiStream_slv32_master_null;
    begin
      if rising_edge(clk) then 
        pull( self  =>  v_Axi_out, tx => Axi_out_s2m);
    
        if (ready_to_send_0(self => v_Axi_out)) then 
          send_data_01(self => v_Axi_out, dataIn => counter);
          counter <= counter + 1;
          
        end if;
      
        if (counter > MaxCount) then 
          counter <=  (others => '0');
          
        end if;
          push( self  =>  v_Axi_out, tx => Axi_out_m2s);
    end if;
    
    end process;
  
end architecture;