-- XGEN: Autogenerated File

library IEEE;
library UNISIM;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use UNISIM.VComponents.all;
use ieee.std_logic_unsigned.all;
use work.argg_hdl_core.all;
use work.slv32_a_pack.all;


package small_buffer_pack is 

-------------------------------------------------------------------------
------- Start Psuedo Class small_buffer -------------------------

type small_buffer is record 
    count : integer;
    head : integer;
    mem : slv32_a(10 - 1 downto 0);
    tail : integer;
end record;
    
    
  constant small_buffer_null : small_buffer:= (
    count => 0,
    head => 0,
    mem => (others => (others => '0')),
    tail => 0
  );


    type small_buffer_a is array (natural range <>) of small_buffer;
        

-- v_list getHeader
-- empty procedure removed. name: 'pull'
-- empty procedure removed. name: 'push'
-- empty procedure removed. name: 'pull'
-- empty procedure removed. name: 'push'
  procedure get_value_00_rshift (self :  inout  small_buffer; rhs :  inout  optional_t);
  procedure set_value_01_lshift (self :  inout  small_buffer; signal rhs :  in  std_logic_vector(31 downto 0));
  procedure read_data_00 (self :  inout  small_buffer; data :  inout  optional_t);
  procedure send_data_01 (self :  inout  small_buffer; signal data :  in  std_logic_vector(31 downto 0));
  function length (self :   small_buffer) return integer;
  function ready_to_send_0 (self :   small_buffer) return boolean;
  function length_0 (self :   small_buffer) return integer;
  function isReceivingData_0 (self :   small_buffer) return boolean;
------- End Psuedo Class small_buffer -------------------------
-------------------------------------------------------------------------


end small_buffer_pack;


package body small_buffer_pack is

-------------------------------------------------------------------------
------- Start Psuedo Class small_buffer -------------------------
-- empty procedure removed. name: 'pull'
-- empty procedure removed. name: 'push'
-- empty procedure removed. name: 'pull'
-- empty procedure removed. name: 'push'
function isReceivingData_0 (self :   small_buffer) return boolean is
   
  begin 
 return self.count > 0;
   
end function;

function length_0 (self :   small_buffer) return integer is
   
  begin 
 return self.mem'length;
   
end function;

function ready_to_send_0 (self :   small_buffer) return boolean is
   
  begin 
 return self.count < self.mem'length;
   
end function;

function length (self :   small_buffer) return integer is
   
  begin 
 return self.mem'length;
   
end function;

procedure send_data_01 (self :  inout  small_buffer; signal data :  in  std_logic_vector(31 downto 0)) is
   
  begin 
 
    if (ready_to_send_0(self => self)) then 
      self.mem(self.head) := data;
      self.head := self.head + 1;
      self.count := self.count + 1;
      
      if (self.head > self.mem'length - 1) then 
        self.head :=  0;
        
      end if;
      
    end if;
   
end procedure;

procedure read_data_00 (self :  inout  small_buffer; data :  inout  optional_t) is
   
  begin 
 reset_0(self => data);
  
    if (self.count > 0) then 
      set_value_00_lshift(self => data, rhs => self.mem(self.tail));
      self.tail := self.tail + 1;
      self.count := self.count - 1;
      
    end if;
  
    if (self.tail > self.mem'length - 1) then 
      self.tail :=  0;
      
    end if;
   
end procedure;

procedure set_value_01_lshift (self :  inout  small_buffer; signal rhs :  in  std_logic_vector(31 downto 0)) is
   
  begin 
 
    if (ready_to_send_0(self => self)) then 
      self.mem(self.head) := rhs;
      self.head := self.head + 1;
      self.count := self.count + 1;
      
      if (self.head > self.mem'length - 1) then 
        self.head :=  0;
        
      end if;
      
    end if;
   
end procedure;

procedure get_value_00_rshift (self :  inout  small_buffer; rhs :  inout  optional_t) is
   
  begin 
 reset_0(self => rhs);
  
    if (self.count > 0) then 
      set_value_00_lshift(self => rhs, rhs => self.mem(self.tail));
      self.tail := self.tail + 1;
      self.count := self.count - 1;
      
    end if;
  
    if (self.tail > self.mem'length - 1) then 
      self.tail :=  0;
      
    end if;
   
end procedure;

------- End Psuedo Class small_buffer -------------------------
  -------------------------------------------------------------------------


end small_buffer_pack;

