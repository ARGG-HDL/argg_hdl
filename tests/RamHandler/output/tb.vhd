-- XGEN: Autogenerated File

library IEEE;
library UNISIM;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use UNISIM.VComponents.all;
use ieee.std_logic_unsigned.all;
use work.argg_hdl_core.all;
use work.optional_t_pack.all;
use work.ram_handler_pack.all;
use work.slv32_a_pack.all;
use work.small_buffer_pack.all;


entity tb is 
end entity;



architecture rtl of tb is

--------------------------tb-----------------
--------------------------clkgen-----------------
  signal clkgen_clk : std_logic := '0'; 
-------------------------- end clkgen-----------------
--------------------------ram-----------------
  signal ram_DataIO_s2m : ram_handler_s2m := ram_handler_s2m_null;
  signal ram_DataIO_m2s : ram_handler_m2s := ram_handler_m2s_null;
  signal ram_clk : std_logic := '0'; 
-------------------------- end ram-----------------
  signal adsdata : std_logic_vector(31 downto 0) := x"000003e8"; 
  signal data : std_logic_vector(31 downto 0) := x"000003e8"; 
  signal m_counter : std_logic_vector(31 downto 0) := x"00000005"; 
-------------------------- end tb-----------------

begin
  -- begin architecture
  
-----------------------------------
proc : process(clkgen_clk) is
  variable s_counter : std_logic_vector(31 downto 0) := x"00000005";
  variable s_mem : small_buffer := small_buffer_null;
  variable opt_data : optional_t := optional_t_null;
  begin
    if rising_edge(clkgen_clk) then 
  m_counter <= m_counter + 1;
    s_counter := m_counter;
    
      if (( m_counter > 15 and to_bool(s_mem) ) ) then 
        data <= data + 1;
        send_data_01(self => s_mem, data => data);
        set_value_01_lshift(self => s_mem, rhs => data);
        
      end if;
    set_value_01_lshift(self => opt_data, rhs => m_counter);
    
      if (m_counter > 20) then 
        m_counter <=  (others => '0');
        for i3 in 0 to length(s_mem) -1 loop 
          read_data_00(self => s_mem, data => opt_data);
          get_value_00_rshift(self => s_mem, rhs => opt_data);
          
          if (to_bool(opt_data) ) then 
            get_data_01(self => opt_data, data => adsdata);
            s_counter := s_counter + 1;
            
          end if;
        end loop;
        
      end if;
    end if;
  
  end process;
  -- end architecture

  clkgen : entity work.clk_generator port map (
    clk => clkgen_clk
  );
  
  ram : entity work.ram_block port map (
    DataIO_s2m => ram_DataIO_s2m,
    DataIO_m2s => ram_DataIO_m2s,
    clk => ram_clk
  );
  ram_clk <= clkgen_clk;
  
end architecture;