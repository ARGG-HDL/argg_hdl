-- XGEN: Autogenerated File



package ram_handler_pack is 

-------------------------------------------------------------------------
------- Start Psuedo Class ram_handler -------------------------

type ram_handler_s2m is record 
    read_data : std_logic_vector(31 downto 0);
end record;
    
    
  constant ram_handler_s2m_null : ram_handler_s2m:= (
    read_data => (others => '0')
  );


    type ram_handler_s2m_a is array (natural range <>) of ram_handler_s2m;
        


type ram_handler_m2s is record 
    Write_Data : std_logic_vector(31 downto 0);
    Write_address : std_logic_vector(31 downto 0);
    read_address : std_logic_vector(31 downto 0);
    write_enable : std_logic;
end record;
    
    
  constant ram_handler_m2s_null : ram_handler_m2s:= (
    Write_Data => (others => '0'),
    Write_address => (others => '0'),
    read_address => (others => '0'),
    write_enable => '0'
  );


    type ram_handler_m2s_a is array (natural range <>) of ram_handler_m2s;
        


type ram_handler is record 
    Write_Data : std_logic_vector(31 downto 0);
    Write_address : std_logic_vector(31 downto 0);
    read_address : std_logic_vector(31 downto 0);
    read_data : std_logic_vector(31 downto 0);
    write_enable : std_logic;
end record;
    
    
  constant ram_handler_null : ram_handler:= (
    Write_Data => (others => '0'),
    Write_address => (others => '0'),
    read_address => (others => '0'),
    read_data => (others => '0'),
    write_enable => '0'
  );


    type ram_handler_a is array (natural range <>) of ram_handler;
        

  procedure pull (self :  inout ram_handler; signal IO_data :  in ram_handler_s2m);
  procedure push (self :  inout ram_handler; signal IO_data :  out ram_handler_m2s);
  procedure pull (self :  inout ram_handler; signal IO_data :  in ram_handler_m2s);
  procedure push (self :  inout ram_handler; signal IO_data :  out ram_handler_s2m);
------- End Psuedo Class ram_handler -------------------------
-------------------------------------------------------------------------


end ram_handler_pack;


package body ram_handler_pack is

-------------------------------------------------------------------------
------- Start Psuedo Class ram_handler -------------------------
procedure pull (self :  inout ram_handler; signal IO_data :  in ram_handler_s2m) is
   
  begin 
 
    
-- Start Connecting
    pull(self.read_data, IO_data.read_data);

-- End Connecting
    
             
end procedure;

procedure push (self :  inout ram_handler; signal IO_data :  out ram_handler_m2s) is
   
  begin 
 
    
-- Start Connecting
    push(self.Write_Data, IO_data.Write_Data);
    push(self.Write_address, IO_data.Write_address);
    push(self.read_address, IO_data.read_address);
    push(self.write_enable, IO_data.write_enable);

-- End Connecting
    
             
end procedure;

procedure pull (self :  inout ram_handler; signal IO_data :  in ram_handler_m2s) is
   
  begin 
 
    
-- Start Connecting
    pull(self.Write_Data, IO_data.Write_Data);
    pull(self.Write_address, IO_data.Write_address);
    pull(self.read_address, IO_data.read_address);
    pull(self.write_enable, IO_data.write_enable);

-- End Connecting
    
             
end procedure;

procedure push (self :  inout ram_handler; signal IO_data :  out ram_handler_s2m) is
   
  begin 
 
    
-- Start Connecting
    push(self.read_data, IO_data.read_data);

-- End Connecting
    
             
end procedure;

------- End Psuedo Class ram_handler -------------------------
  -------------------------------------------------------------------------


end ram_handler_pack;

