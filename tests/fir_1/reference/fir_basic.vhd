-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.argg_hdl_core.all;
use work.signed16_a_pack.all;
use work.signed17_a_pack.all;
use work.signed8_a_pack.all;


entity fir_basic is 
  port(
    clk :  in  std_logic := '0';
    i_coeff_0 :  in  std_logic_vector(7 downto 0) := (others => '0');
    i_coeff_1 :  in  std_logic_vector(7 downto 0) := (others => '0');
    i_coeff_2 :  in  std_logic_vector(7 downto 0) := (others => '0');
    i_coeff_3 :  in  std_logic_vector(7 downto 0) := (others => '0');
    i_data :  in  std_logic_vector(7 downto 0) := (others => '0');
    i_rstb :  in  std_logic := '0';
    o_data :  out  std_logic_vector(7 downto 0) := (others => '0')
  );
end entity;



architecture rtl of fir_basic is

--------------------------fir_basic-----------------
  signal local_data : signed(7 downto 0) := (others => '0'); 
  signal p_data : signed8_a(0 to 4 - 1)  := (others => (others => '0'));
  signal r_add_st0 : signed17_a(0 to 2 - 1)  := (others => (others => '0'));
  signal r_add_st1 : signed(17 downto 0) := (others => '0'); 
  signal r_coeff : signed8_a(0 to 4 - 1)  := (others => (others => '0'));
  signal r_mult : signed16_a(0 to 4 - 1)  := (others => (others => '0'));
-------------------------- end fir_basic-----------------

begin
  -- begin architecture
  
-----------------------------------
p_input : process(clk) is
  begin
    if rising_edge(clk) then 
  
      if (i_rstb = '1') then 
        r_coeff <= (others => (others => '0'));
        
      end if;
    p_data <= local_data & p_data(0 to p_data'length - 2);
    r_coeff(0)  <=  signed(i_coeff_0);
    r_coeff(1)  <=  signed(i_coeff_1);
    r_coeff(2)  <=  signed(i_coeff_2);
    r_coeff(3)  <=  signed(i_coeff_3);
    end if;
  
  end process;
  
-----------------------------------
p_mult : process(clk) is
  begin
    if rising_edge(clk) then 
  
      if (i_rstb = '1') then 
        r_mult <= (others => (others => '0'));
        
      end if;
    for i13 in 0 to r_mult'length -1 loop 
        r_mult(i13) <= p_data(i13) * r_coeff(i13);
      end loop;
    end if;
  
  end process;
  
-----------------------------------
p_add_st0 : process(clk) is
  begin
    if rising_edge(clk) then 
  
      if (i_rstb = '1') then 
        r_add_st0 <= (others => (others => '0'));
        
      end if;
    for i14 in 0 to 2 -1 loop 
        r_add_st0(i14) <= resize(r_mult(2 * i14), 16 + 1) + resize(r_mult(2 * i14 + 1), 16 + 1);
      end loop;
    end if;
  
  end process;
  
-----------------------------------
p_add_st1 : process(clk) is
  begin
    if rising_edge(clk) then 
  
      if (i_rstb = '1') then 
        r_add_st1 <= (others => '0');
        
      end if;
    r_add_st1 <= resize(r_add_st0(0), 16 + 2) + resize(r_add_st0(1), 16 + 2);
    end if;
  
  end process;
  
-----------------------------------
p_output : process(clk) is
  begin
    if rising_edge(clk) then 
  
      if (i_rstb = '1') then 
        o_data <= (others => '0');
        
      end if;
    o_data  <=  std_logic_vector(r_add_st1(r_add_st1'length -1   downto  8));
    end if;
  
  end process;
  -- end architecture
local_data  <=  signed(i_data);
  
end architecture;